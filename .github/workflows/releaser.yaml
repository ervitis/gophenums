name: Manual Release

permissions:
  contents: write

on:
  workflow_dispatch:
    inputs:
      tag_version_message:
        description: 'Enter a description'
        required: true
        type: string
      release_type:
        description: 'Select the release type'
        type: choice
        required: true
        default: 'patch'
        options:
          - major
          - minor
          - patch

jobs:

  releaser:
    permissions:
      id-token: write # To sign the provenance.
      contents: write # To upload assets to release.
      actions: read # To read the workflow path.
    needs:
      - create-tag-and-release
    uses: slsa-framework/slsa-github-generator/.github/workflows/builder_go_slsa3.yml@v1.9.0
    with:
      go-version: 1.21

  create-tag-and-release:
    permissions:
      id-token: write # To sign the provenance.
      contents: write # To upload assets to release.
      actions: read # To read the workflow path.

    runs-on: ubuntu-latest

    outputs:
      LATEST_TAG: steps.latest_tag.outputs.LATEST_TAG
      NEW_VERSION: steps.new_version.outputs.NEW_VERSION

    steps:

      - uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Get latest tag
        id: latest_tag
        run: |
          git fetch --tags
          latest_tag=$(git tag --sort=-creatordate | head -n 1)
          echo "LATEST_TAG=$latest_tag" >> $GITHUB_OUTPUT

      - name: Determine New Version
        id: new_version
        run: |
          case ${{ github.event.inputs.release_type }} in
          major)
           new_version=$(echo "${{ steps.latest_tag.outputs.LATEST_TAG }}" | awk -F. '{printf "v%d.%d.%d\n", $1+1, 0, 0}')
           ;;
          minor)
           new_version=$(echo "${{ steps.latest_tag.outputs.LATEST_TAG }}" | awk -F. '{printf "v%d.%d.%d\n", $1, $2+1, 0}')
           ;;
          patch)
           new_version=$(echo "${{ steps.latest_tag.outputs.LATEST_TAG }}" | awk -F. '{printf "v%d.%d.%d\n", $1, $2, $3+1}')
           ;;
          *)
           echo "Invalid release type specified."
           exit 1
           ;;
          esac
          echo "NEW_VERSION=$new_version" >> $GITHUB_OUTPUT

      - name: Create Tag
        run: |
          git config user.email "${{ secrets.BOT_EMAIL }}"
          git config user.name "${{ secrets.BOT_NAME }}"
          git tag -a "${{ steps.new_version.outputs.NEW_VERSION }}" -m "${{ github.event.inputs.tag_version_message }}"
          git push origin "${{ steps.new_version.outputs.NEW_VERSION }}"
