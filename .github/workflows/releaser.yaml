name: Manual Release

permissions:
  contents: write

on:
  workflow_dispatch:
    inputs:
      tag_version_message:
        description: 'Enter a description'
        required: true
        type: string
      release_type:
        description: 'Select the release type'
        type: choice
        required: true
        default: 'patch'
        options:
          - major
          - minor
          - patch

jobs:

  #releaser:
  #  permissions:
  #    id-token: write # To sign the provenance.
  #    contents: write # To upload assets to release.
  #    actions: read # To read the workflow path.
  #  needs: create-tag
  #  uses: slsa-framework/slsa-github-generator/.github/workflows/builder_go_slsa3.yml@v1.8.0
  #  with:
  #    go-version: 1.21
  #    config-file: .slsa-goreleaser.yml
  #    evaluated-envs: "VERSION:${{needs.create-tag.outputs.NEW_VERSION}}"
  #    upload-assets: true
  #    upload-tag-name: ${{ needs.create-tag.outputs.NEW_VERSION }}

  create-tag:
    permissions:
      contents: write

    runs-on: ubuntu-latest

    outputs:
      LATEST_TAG: steps.set-tag.outputs.LATEST_TAG
      NEW_VERSION: steps.create-version.outputs.NEW_VERSION

    env:
      LATEST_TAG: ${{ steps.set-tag.outputs.LATEST_TAG }}
      NEW_VERSION: ${{ steps.create-version.outputs.NEW_VERSION }}

    steps:

      - uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Get latest tag
        id: set-tag
        run: |
          git fetch --tags
          latest_tag=$(git tag --sort=-creatordate | head -n 1)
          echo "latest_tag=$latest_tag" >> $GITHUB_OUTPUT

      - name: Determine New Version
        id: create-version
        run: |
          case ${{ github.event.inputs.release_type }} in
          major)
           NEW_VERSION=$(echo "${{ steps.set-tag.outputs.latest_tag }}" | awk -F. '{printf "v%d.%d.%d\n", $1+1, 0, 0}')
           ;;
          minor)
           NEW_VERSION=$(echo "${{ steps.set-tag.outputs.latest_tag }}" | awk -F. '{printf "v%d.%d.%d\n", $1, $2+1, 0}')
           ;;
          patch)
           NEW_VERSION=$(echo "${{ steps.set-tag.outputs.latest_tag }}" | awk -F. '{printf "v%d.%d.%d\n", $1, $2, $3+1}')
           ;;
          *)
           echo "Invalid release type specified."
           exit 1
           ;;
          esac
          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_OUTPUT

      - name: Create Tag
        run: |
          git config user.email "${{ secrets.BOT_EMAIL }}"
          git config user.name "${{ secrets.BOT_NAME }}"
          git tag -a "${{ steps.create-version.outputs.NEW_VERSION }}" -m "${{ github.event.inputs.tag_version_message }}"
          git push origin "${{ steps.create-version.outputs.NEW_VERSION }}"

  test:
    needs: create-tag
    runs-on: ubuntu-latest
    steps:
      - name: Test me
        run: |
          MY_VERSION=$(echo "${{ needs.create-tag.outputs.NEW_VERSION }}")
          echo $MY_VERSION
      - name: Test me 2
        env:
          MY_TAG: "LATEST_TAG:${{ needs.create-tag.outputs.latest_tag }}"
        run: echo "LATEST_TAG:$(echo '${{ needs.create-tag.outputs.latest_tag }}') and env:${{ env.MY_TAG }}"