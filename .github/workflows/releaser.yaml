name: Manual Release

permissions:
  contents: write

on:
  workflow_dispatch:
    inputs:
      tag_version_message:
        description: 'Enter a description'
        required: true
        type: string
      release_type:
        description: 'Select the release type'
        type: choice
        required: true
        default: 'patch'
        options:
          - major
          - minor
          - patch

jobs:

  releaser:
    permissions:
      id-token: write # To sign the provenance.
      contents: write # To upload assets to release.
      actions: read # To read the workflow path.
    needs:
      - create-tag
    uses: slsa-framework/slsa-github-generator/.github/workflows/builder_go_slsa3.yml@v1.8.0
    with:
      go-version: 1.21
      config-file: .slsa-goreleaser.yml
      evaluated-envs: "VERSION:${{needs.create-tag.outputs.new_version}}"
      upload-assets: true
      upload-tag-name: $(echo ${{ needs.create-tag.outputs.new_version }})

  create-tag:
    permissions:
      contents: write

    runs-on: ubuntu-latest

    outputs:
      latest_tag: steps.latest_tag.outputs.latest_tag
      new_version: steps.create_version.outputs.new_version

    steps:

      - uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Get latest tag
        id: latest_tag
        run: |
          git fetch --tags
          latest_tag=$(git tag --sort=-creatordate | head -n 1)
          echo "latest_tag=$latest_tag" >> $GITHUB_OUTPUT

      - name: Determine New Version
        id: create_version
        run: |
          case ${{ github.event.inputs.release_type }} in
          major)
           new_version=$(echo "${{ steps.latest_tag.outputs.latest_tag }}" | awk -F. '{printf "v%d.%d.%d\n", $1+1, 0, 0}')
           ;;
          minor)
           new_version=$(echo "${{ steps.latest_tag.outputs.latest_tag }}" | awk -F. '{printf "v%d.%d.%d\n", $1, $2+1, 0}')
           ;;
          patch)
           new_version=$(echo "${{ steps.latest_tag.outputs.latest_tag }}" | awk -F. '{printf "v%d.%d.%d\n", $1, $2, $3+1}')
           ;;
          *)
           echo "Invalid release type specified."
           exit 1
           ;;
          esac
          echo "new_version=$new_version" >> $GITHUB_OUTPUT

      - name: Create Tag
        run: |
          git config user.email "${{ secrets.BOT_EMAIL }}"
          git config user.name "${{ secrets.BOT_NAME }}"
          git tag -a "${{ steps.create_version.outputs.new_version }}" -m "${{ github.event.inputs.tag_version_message }}"
          git push origin "${{ steps.create_version.outputs.new_version }}"
